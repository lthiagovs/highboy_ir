#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_log.h"
#include "ir_receiver.h"
#include "ir_protocol.h"

#define TAG "MAIN"

static rmt_symbol_word_t raw_symbols[MEM_BLOCK_SYMBOLS];


void app_main(void)
{
    ESP_LOGI(TAG, "Inicializando receptor IR...");

    if (!rmt_rx_init()) {
        ESP_LOGE(TAG, "Erro na inicializa√ß√£o do receptor IR");
        return;
    }

    if (!rmt_rx_receive_start_queue()) {
        ESP_LOGE(TAG, "Falha ao criar fila de recep√ß√£o");
        return;
    }

    size_t received = 0;

    if (rmt_rx_receive_once(raw_symbols, MEM_BLOCK_SYMBOLS, &received)) {
        ESP_LOGI(TAG, "Recebido %d s√≠mbolos IR", (int)received);
        
        // DETEC√á√ÉO DO PROTOCOLO
        const char* protocol = detect_ir_protocol(raw_symbols, received);
        ESP_LOGI(TAG, "üéØ PROTOCOLO DETECTADO: %s", protocol);
        
        // AN√ÅLISE DETALHADA
        analyze_your_signal(raw_symbols, received);
        
        // DECODIFICA√á√ÉO (exemplo para NEC)
        if (strcmp(protocol, "NEC") == 0) {
            uint32_t data = decode_nec_data(raw_symbols, received);
            ESP_LOGI(TAG, "Dados NEC: 0x%08X", (unsigned int)data);
        }
        
        // Mostra primeiros s√≠mbolos
        for (size_t i = 0; i < received && i < 10; i++) {
            ESP_LOGI(TAG, "Simb[%d] L0=%d D0=%dus L1=%d D1=%dus", (int)i,
                     raw_symbols[i].level0, raw_symbols[i].duration0,
                     raw_symbols[i].level1, raw_symbols[i].duration1);
        }
    } else {
        ESP_LOGW(TAG, "Timeout - nenhum sinal recebido");
    }

    rmt_rx_receive_stop_queue();
    rmt_rx_delete();
    ESP_LOGI(TAG, "Receptor IR finalizado.");

}
