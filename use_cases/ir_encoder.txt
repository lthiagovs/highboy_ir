#include "driver/rmt_tx.h"  // Novo driver para transmissão
#include "driver/rmt_rx.h"  // Novo driver para recepção
#include "soc/rtc.h"
#include "esp_system.h"
#include "esp_log.h"
#include "esp_timer.h" 
#include "freertos/FreeRTOS.h"
#include "freertos/queue.h"  // Biblioteca para fila no FreeRTOS
#include "ir_transmitter.h"
#include "ir_encoder.h"

static const char *TAG = "IR_MAIN";

void app_main(void)
{
    // Inicializar RMT
    rmt_tx_init();
    
    // Criar copy encoder (como você já tinha)
    rmt_encoder_handle_t copy_encoder = NULL;
    rmt_copy_encoder_config_t copy_encoder_config = {};
    
    esp_err_t err_encoder = rmt_new_copy_encoder(&copy_encoder_config, &copy_encoder);
    if (err_encoder != ESP_OK) {
        ESP_LOGE(TAG, "Falha ao criar copy encoder: %s", esp_err_to_name(err_encoder));
        return;
    }
    ESP_LOGI(TAG, "Copy encoder criado com sucesso.");
    
    // Criar IR encoder
    ir_encoder_handle_t ir_encoder = NULL;
    ir_encoder_config_t ir_config = IR_ENCODER_DEFAULT_CONFIG();
    
    esp_err_t err_ir = ir_encoder_new(&ir_config, &ir_encoder);
    if (err_ir != ESP_OK) {
        ESP_LOGE(TAG, "Falha ao criar IR encoder: %s", esp_err_to_name(err_ir));
        return;
    }
    ESP_LOGI(TAG, "IR encoder criado com sucesso.");
    
    // Buffer para símbolos gerados
    rmt_symbol_word_t symbols[64];
    size_t num_symbols;
    
    // === EXEMPLO 1: NEC Protocol ===
    ESP_LOGI(TAG, "Enviando comando NEC...");
    esp_err_t err_nec = ir_encode_nec(ir_encoder, 0x00, 0x12, symbols, 64, &num_symbols);
    if (err_nec == ESP_OK) {
        ESP_LOGI(TAG, "NEC codificado: %zu símbolos", num_symbols);
        rmt_tx_transmit(copy_encoder, symbols, num_symbols);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
    
    // === EXEMPLO 2: Sony Protocol ===
    ESP_LOGI(TAG, "Enviando comando Sony...");
    esp_err_t err_sony = ir_encode_sony(ir_encoder, 0x01, 0x15, symbols, 64, &num_symbols);
    if (err_sony == ESP_OK) {
        ESP_LOGI(TAG, "Sony codificado: %zu símbolos", num_symbols);
        rmt_tx_transmit(copy_encoder, symbols, num_symbols);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
    
    // === EXEMPLO 3: Samsung Protocol ===
    ESP_LOGI(TAG, "Enviando comando Samsung...");
    esp_err_t err_samsung = ir_encode_samsung(ir_encoder, 0x0707, 0x02, symbols, 64, &num_symbols);
    if (err_samsung == ESP_OK) {
        ESP_LOGI(TAG, "Samsung codificado: %zu símbolos", num_symbols);
        rmt_tx_transmit(copy_encoder, symbols, num_symbols);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
    
    // === EXEMPLO 4: NEC Repeat ===
    ESP_LOGI(TAG, "Enviando NEC repeat...");
    esp_err_t err_repeat = ir_encode_nec_repeat(ir_encoder, symbols, 64, &num_symbols);
    if (err_repeat == ESP_OK) {
        ESP_LOGI(TAG, "NEC repeat codificado: %zu símbolos", num_symbols);
        rmt_tx_transmit(copy_encoder, symbols, num_symbols);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
    
    // === EXEMPLO 5: Usando a função genérica ===
    ESP_LOGI(TAG, "Enviando comando genérico...");
    ir_command_t generic_cmd = {
        .protocol = IR_PROTOCOL_NEC,
        .address = 0xFF,
        .command = 0xAA,
        .repeat = false
    };
    
    esp_err_t err_generic = ir_encoder_encode(ir_encoder, &generic_cmd, symbols, 64, &num_symbols);
    if (err_generic == ESP_OK) {
        ESP_LOGI(TAG, "Comando genérico codificado: %zu símbolos", num_symbols);
        rmt_tx_transmit(copy_encoder, symbols, num_symbols);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
    
    // === EXEMPLO 6: Loop com diferentes comandos ===
    ESP_LOGI(TAG, "Iniciando loop de transmissão...");
    
    for (int i = 0; i < 5; i++) {
        // Alternar entre diferentes protocolos
        switch (i % 3) {
            case 0:
                ESP_LOGI(TAG, "Loop %d: NEC", i);
                ir_encode_nec(ir_encoder, 0x10, i, symbols, 64, &num_symbols);
                break;
                
            case 1:
                ESP_LOGI(TAG, "Loop %d: Sony", i);
                ir_encode_sony(ir_encoder, 0x01, i, symbols, 64, &num_symbols);
                break;
                
            case 2:
                ESP_LOGI(TAG, "Loop %d: Samsung", i);
                ir_encode_samsung(ir_encoder, 0x0707, i, symbols, 64, &num_symbols);
                break;
        }
        
        rmt_tx_transmit(copy_encoder, symbols, num_symbols);
        vTaskDelay(pdMS_TO_TICKS(2000));
    }
    
    // Cleanup
    ESP_LOGI(TAG, "Limpando recursos...");
    
    // Deletar IR encoder
    ir_encoder_del(ir_encoder);
    
    // Deletar copy encoder
    rmt_del_encoder(copy_encoder);
    
    // Sua função de cleanup
    rmt_tx_delete();
    
    ESP_LOGI(TAG, "Transmissão IR concluída!");
}