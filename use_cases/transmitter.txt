#include "driver/rmt_tx.h"  // Novo driver para transmissão
#include "driver/rmt_rx.h"  // Novo driver para recepção
#include "soc/rtc.h"
#include "esp_system.h"
#include "esp_log.h"
#include "esp_timer.h" 
#include "freertos/FreeRTOS.h"
#include "freertos/queue.h"  // Biblioteca para fila no FreeRTOS
#include "ir_transmitter.h"
#include "ir_encoder.h"


void app_main(void)
{

    rmt_tx_init();

    rmt_symbol_word_t raw_symbols[] = {
        // Start bit: 9ms HIGH + 4.5ms LOW
        {.level0 = 1, .duration0 = 9000, .level1 = 0, .duration1 = 4500},
        // Data bit '1': 560µs HIGH + 1690µs LOW  
        {.level0 = 1, .duration0 = 560, .level1 = 0, .duration1 = 1690},
        // Data bit '0': 560µs HIGH + 560µs LOW
        {.level0 = 1, .duration0 = 560, .level1 = 0, .duration1 = 560},
        // Stop bit: 560µs HIGH
        {.level0 = 1, .duration0 = 560, .level1 = 0, .duration1 = 0},
    };
    // Criar um encoder simples (copy encoder)
    rmt_encoder_handle_t copy_encoder = NULL;
    rmt_copy_encoder_config_t copy_encoder_config = {};
    
    esp_err_t err_encoder = rmt_new_copy_encoder(&copy_encoder_config, &copy_encoder);
    if (err_encoder != ESP_OK) {
        ESP_LOGE("RMT", "Falha ao criar encoder: %s", esp_err_to_name(err_encoder));
        return;
    }
    ESP_LOGI("RMT", "Copy encoder criado com sucesso.");

    // Buffer de dados para transmitir
    size_t data_size = sizeof(raw_symbols);
    size_t num_symbols = sizeof(raw_symbols) / sizeof(raw_symbols[0]);
    
    ESP_LOGI("RMT", "Iniciando transmissão...");
    

    rmt_tx_transmit(copy_encoder, raw_symbols, num_symbols);

    rmt_tx_delete();

}
